TODO:

  -> Write the Solver
  -> Write general plotting interface within the Solution class
  -> Reevaluate the project
  

- make interface with the rate lambda functions nicer: at the moment if the user wants to access the conditions of other boxes very long expressions have to be types: for example:  c.box_upper_ocean.cond.T 
- incorporate processes and fluxes
- incorporate reactions
- make reactions stop if one of the educts is not available anymore
- make gui
- stability criterion for timesteps?!
- Think about a way to calculate the timestep more efficient:
  --> parallel computing?
  --> cython?
  --> C function?!

NEW:
-> molar mass
-> setter methods for immutalbe attributes and for pint quantities of a certain dimension (for example for the mass: 
@mass.setter
def mass(self, m):
	bla bla bla bla
-> TestCase.assertRaises : check that 
-> if a UnitRegistry is used: Always use the instance that is instantiated within the __init__.py module of the boxsimu parents directory.



-> Maybe write a parameter that specifies how much a variable is active ( that means how much of the total mass at a certain moment is paricipating in reactions etc....)
